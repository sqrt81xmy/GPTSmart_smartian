{'res': [{'functionName': 'Token', 'sequences': [], 'reason': []}, {'functionName': 'LocalEthereumEscrows', 'sequences': [], 'reason': []}, {'functionName': 'constructor', 'sequences': [[{'functionName': 'LocalEthereumEscrows()', 'msgValue': 0, 'msgSender': 'NormalUser1'}]], 'reason': ["The constructor function 'LocalEthereumEscrows()' is called to initialize the contract, setting the 'owner', 'arbitrator', and 'relayer' to 'msg.sender', and 'requestCancellationMinimumTime' to 2 hours. This is necessary to reach the statements 'owner = msg.sender;', 'arbitrator = msg.sender;', 'relayer = msg.sender;', and 'requestCancellationMinimumTime = 2 hours;'."]}, {'functionName': 'createEscrow', 'sequences': [[{'functionName': 'LocalEthereumEscrows()', 'msgValue': 0, 'msgSender': 'TargetOwner'}, {'functionName': "createEscrow(0x1234, NormalUser1, NormalUser2, 100, 10, 86400, 1234567890, 27, '0x...', '0x...')", 'msgValue': 100, 'msgSender': 'NormalUser1'}]], 'reason': ["After initializing the contract with 'LocalEthereumEscrows()', 'createEscrow(0x1234, NormalUser1, NormalUser2, 100, 10, 86400, 1234567890, 27, '0x...', '0x...')' is called by 'NormalUser1' with 100 wei to create an escrow, reaching the statement 'bytes32 _tradeHash = keccak256(abi.encodePacked(_tradeID, _seller, _buyer, _value, _fee));'."]}, {'functionName': 'resolveDispute', 'sequences': [[{'functionName': 'LocalEthereumEscrows()', 'msgValue': 0, 'msgSender': 'TargetOwner'}, {'functionName': "createEscrow(0x1234, NormalUser1, NormalUser2, 100, 10, 86400, 1234567890, 27, '0x...', '0x...')", 'msgValue': 100, 'msgSender': 'NormalUser1'}, {'functionName': "resolveDispute(0x1234, NormalUser1, NormalUser2, 100, 10, 27, '0x...', '0x...', 50)", 'msgValue': 0, 'msgSender': 'TargetOwner'}]], 'reason': ["After initializing the contract and creating an escrow, 'resolveDispute(0x1234, NormalUser1, NormalUser2, 100, 10, 27, '0x...', '0x...', 50)' is called by 'TargetOwner' to resolve a dispute, reaching the statement 'address _signature = recoverAddress(keccak256(abi.encodePacked(_tradeID, INSTRUCTION_RESOLVE)), _v, _r, _s);'."]}, {'functionName': 'release', 'sequences': [[{'functionName': 'LocalEthereumEscrows()', 'msgValue': 0, 'msgSender': 'TargetOwner'}, {'functionName': "createEscrow(0x1234, NormalUser1, NormalUser2, 100, 10, 86400, 1234567890, 27, '0x...', '0x...')", 'msgValue': 100, 'msgSender': 'NormalUser1'}, {'functionName': 'release(0x1234, NormalUser1, NormalUser2, 100, 10)', 'msgValue': 0, 'msgSender': 'NormalUser1'}]], 'reason': ['After initializing the contract and creating an escrow, \'release(0x1234, NormalUser1, NormalUser2, 100, 10)\' is called by \'NormalUser1\' to release funds to the buyer, reaching the statement \'require(msg.sender == _seller, "Must be seller");\'.']}, {'functionName': 'disableSellerCancel', 'sequences': [[{'functionName': 'LocalEthereumEscrows()', 'msgValue': 0, 'msgSender': 'TargetOwner'}, {'functionName': "createEscrow(0x1234, NormalUser1, NormalUser2, 100, 10, 86400, 1234567890, 27, '0x...', '0x...')", 'msgValue': 100, 'msgSender': 'NormalUser1'}, {'functionName': 'disableSellerCancel(0x1234, NormalUser1, NormalUser2, 100, 10)', 'msgValue': 0, 'msgSender': 'NormalUser2'}]], 'reason': ['After initializing the contract and creating an escrow, \'disableSellerCancel(0x1234, NormalUser1, NormalUser2, 100, 10)\' is called by \'NormalUser2\' to disable the seller from cancelling, reaching the statement \'require(msg.sender == _buyer, "Must be buyer");\'.']}, {'functionName': 'buyerCancel', 'sequences': [[{'functionName': 'LocalEthereumEscrows()', 'msgValue': 0, 'msgSender': 'TargetOwner'}, {'functionName': "createEscrow(0x1234, NormalUser1, NormalUser2, 100, 10, 86400, 1234567890, 27, '0x...', '0x...')", 'msgValue': 100, 'msgSender': 'NormalUser1'}, {'functionName': 'buyerCancel(0x1234, NormalUser1, NormalUser2, 100, 10)', 'msgValue': 0, 'msgSender': 'NormalUser2'}]], 'reason': ['After initializing the contract and creating an escrow, \'buyerCancel(0x1234, NormalUser1, NormalUser2, 100, 10)\' is called by \'NormalUser2\' to cancel the escrow, reaching the statement \'require(msg.sender == _buyer, "Must be buyer");\'.']}, {'functionName': 'sellerCancel', 'sequences': [[{'functionName': 'LocalEthereumEscrows()', 'msgValue': 0, 'msgSender': 'TargetOwner'}, {'functionName': "createEscrow(0x1234, NormalUser1, NormalUser2, 100, 10, 86400, 1234567890, 27, '0x...', '0x...')", 'msgValue': 100, 'msgSender': 'NormalUser1'}, {'functionName': 'sellerCancel(0x1234, NormalUser1, NormalUser2, 100, 10)', 'msgValue': 0, 'msgSender': 'NormalUser1'}]], 'reason': ['After initializing the contract and creating an escrow, \'sellerCancel(0x1234, NormalUser1, NormalUser2, 100, 10)\' is called by \'NormalUser1\' to cancel the escrow, reaching the statement \'require(msg.sender == _seller, "Must be seller");\'.']}, {'functionName': 'sellerRequestCancel', 'sequences': [[{'functionName': 'LocalEthereumEscrows()', 'msgValue': 0, 'msgSender': 'TargetOwner'}, {'functionName': "createEscrow(0x1234, NormalUser1, NormalUser2, 100, 10, 86400, 1234567890, 27, '0x...', '0x...')", 'msgValue': 100, 'msgSender': 'NormalUser1'}, {'functionName': 'sellerRequestCancel(0x1234, NormalUser1, NormalUser2, 100, 10)', 'msgValue': 0, 'msgSender': 'NormalUser1'}]], 'reason': ['After initializing the contract and creating an escrow, \'sellerRequestCancel(0x1234, NormalUser1, NormalUser2, 100, 10)\' is called by \'NormalUser1\' to request to cancel the escrow, reaching the statement \'require(msg.sender == _seller, "Must be seller");\'.']}, {'functionName': 'batchRelay', 'sequences': [[{'functionName': 'LocalEthereumEscrows()', 'msgValue': 0, 'msgSender': 'TargetOwner'}, {'functionName': "batchRelay([0x1234], [NormalUser1], [NormalUser2], [100], [10], [1000000000], [27], ['0x...'], ['0x...'], [INSTRUCTION_RELEASE])", 'msgValue': 0, 'msgSender': 'TargetOwner'}]], 'reason': ["After initializing the contract, 'batchRelay([0x1234], [NormalUser1], [NormalUser2], [100], [10], [1000000000], [27], ['0x...'], ['0x...'], [INSTRUCTION_RELEASE])' is called by 'TargetOwner' to relay multiple signed instructions, reaching the statement 'bool[] memory _results = new bool[](_tradeID.length);'."]}, {'functionName': 'withdrawFees', 'sequences': [[{'functionName': 'LocalEthereumEscrows()', 'msgValue': 0, 'msgSender': 'TargetOwner'}, {'functionName': 'withdrawFees(NormalUser1, 50)', 'msgValue': 0, 'msgSender': 'TargetOwner'}]], 'reason': ['After initializing the contract, \'withdrawFees(NormalUser1, 50)\' is called by \'TargetOwner\' to withdraw fees, reaching the statement \'require(_amount <= feesAvailableForWithdraw, "Amount is higher than amount available");\'.']}, {'functionName': 'setArbitrator', 'sequences': [[{'functionName': 'LocalEthereumEscrows()', 'msgValue': 0, 'msgSender': 'TargetOwner'}, {'functionName': 'setArbitrator(NormalUser2)', 'msgValue': 0, 'msgSender': 'TargetOwner'}]], 'reason': ["After initializing the contract, 'setArbitrator(NormalUser2)' is called by 'TargetOwner' to set a new arbitrator, reaching the statement 'arbitrator = _newArbitrator;'."]}, {'functionName': 'setOwner', 'sequences': [[{'functionName': 'LocalEthereumEscrows()', 'msgValue': 0, 'msgSender': 'TargetOwner'}, {'functionName': 'setOwner(NormalUser2)', 'msgValue': 0, 'msgSender': 'TargetOwner'}]], 'reason': ["After initializing the contract, 'setOwner(NormalUser2)' is called by 'TargetOwner' to set a new owner, reaching the statement 'owner = _newOwner;'."]}, {'functionName': 'setRelayer', 'sequences': [[{'functionName': 'LocalEthereumEscrows()', 'msgValue': 0, 'msgSender': 'TargetOwner'}, {'functionName': 'setRelayer(NormalUser2)', 'msgValue': 0, 'msgSender': 'TargetOwner'}]], 'reason': ["After initializing the contract, 'setRelayer(NormalUser2)' is called by 'TargetOwner' to set a new relayer, reaching the statement 'relayer = _newRelayer;'."]}, {'functionName': 'setRequestCancellationMinimumTime', 'sequences': [[{'functionName': 'LocalEthereumEscrows()', 'msgValue': 0, 'msgSender': 'TargetOwner'}, {'functionName': 'setRequestCancellationMinimumTime(86400)', 'msgValue': 0, 'msgSender': 'TargetOwner'}]], 'reason': ["After initializing the contract, 'setRequestCancellationMinimumTime(86400)' is called by 'TargetOwner' to set a new request cancellation minimum time, reaching the statement 'requestCancellationMinimumTime = _newRequestCancellationMinimumTime;'."]}, {'functionName': 'transferToken', 'sequences': [[{'functionName': 'LocalEthereumEscrows()', 'msgValue': 0, 'msgSender': 'TargetOwner'}, {'functionName': 'transferToken(TARG_CONTRACT, NormalUser1, 100)', 'msgValue': 0, 'msgSender': 'TargetOwner'}]], 'reason': ["After initializing the contract, 'transferToken(TARG_CONTRACT, NormalUser1, 100)' is called by 'TargetOwner' to transfer tokens, reaching the statement '_tokenContract.transfer(_transferTo, _value);'."]}, {'functionName': 'transferTokenFrom', 'sequences': [[{'functionName': 'LocalEthereumEscrows()', 'msgValue': 0, 'msgSender': 'TargetOwner'}, {'functionName': 'transferTokenFrom(TARG_CONTRACT, NormalUser1, NormalUser2, 100)', 'msgValue': 0, 'msgSender': 'TargetOwner'}]], 'reason': ["After initializing the contract, 'transferTokenFrom(TARG_CONTRACT, NormalUser1, NormalUser2, 100)' is called by 'TargetOwner' to transfer tokens from one address to another, reaching the statement '_tokenContract.transferFrom(_transferTo, _transferFrom, _value);'."]}, {'functionName': 'approveToken', 'sequences': [[{'functionName': 'LocalEthereumEscrows()', 'msgValue': 0, 'msgSender': 'TargetOwner'}, {'functionName': 'approveToken(TARG_CONTRACT, NormalUser1, 100)', 'msgValue': 0, 'msgSender': 'TargetOwner'}]], 'reason': ["After initializing the contract, 'approveToken(TARG_CONTRACT, NormalUser1, 100)' is called by 'TargetOwner' to approve tokens, reaching the statement '_tokenContract.approve(_spender, _value);'."]}, {'functionName': 'relay', 'sequences': [], 'reason': []}, {'functionName': 'increaseGasSpent', 'sequences': [], 'reason': []}, {'functionName': 'transferMinusFees', 'sequences': [], 'reason': []}, {'functionName': 'doRelease', 'sequences': [], 'reason': []}, {'functionName': 'doDisableSellerCancel', 'sequences': [], 'reason': []}, {'functionName': 'doBuyerCancel', 'sequences': [], 'reason': []}, {'functionName': 'doSellerCancel', 'sequences': [], 'reason': []}, {'functionName': 'doSellerRequestCancel', 'sequences': [], 'reason': []}, {'functionName': 'getRelayedSender', 'sequences': [], 'reason': []}, {'functionName': 'getEscrowAndHash', 'sequences': [], 'reason': []}, {'functionName': 'recoverAddress', 'sequences': [], 'reason': []}]}