You should go through each element in the array you just generated,
for each element, you will get the `block_first_statement` statement array,
for each statement `stm` in this array,
try to design a function call sequence to help the execute program to reach this statement `stm` in the `functionName`.

The definition of a function call sequence is the format as below:
`[a(86,87,32),b(),c()]`, where a b and c are functions so the sequence is the array of function call,
the content in the parentheses are the parameters,
each element in your sequence should follow the call format of the function where
function should take the parameters according to the function definition in the solidity file.
The function sequence you designed will be called in the order of the sequence.

You should know that you function sequence must first consider the constructor function in the main Contract,
and in this solidity file, the main Contract is `${mainContract}`. SO you should also consider the parameter in the constructor function.

If the mainContract contains the constructor function, then you must contain this constructor function.
If the mianContract does not contain the constructor function, then you must not contain the constructor function.

When you designed the function sequence, you should carefully read the statements before the statement that you will reach,
and you should consider these important tips that I will tell you,
which is:
1. if there is some branch statement before `stm`, you should satisfy or dissatisfy the condition in the branch statement,
or you can even ignore the branch only if it makes no influence for reaching the statement.
If the condition dose have the influence, you should consider it carefully.
If the condition uses the variable that is not in this function, you should find where you can change this variable in other functions,
but, you should remember, you cannot call a `internal` or `private` function, but you can call the other function which can call the `internal` or `private` function.
If the condition uses the arguments of this function, you should consider, how to design the parameter to satisfy the condition,
as for the parameter,
first, you should make sure that your designed parameter must satisfy the parameter type of the function, for example, if the parameter is `uint32 amount`,
your amount parameter must be `uint32`, like `591`.
second, you should design the `msg.value` as another parameter, if the function does not use the `msg.value`, just make `msg.value` 0.
third, you should design the `msg.sender` as another parameter, you can choose the value from these four values, which is `NormalUser1,NormalUser2,NormalUser3,TargetOwner`,
but, REMEMBER, if you find the `owner` or `Owner` definition in the constructor, just use it instead of `TargetOwner` to satisfy the `onlyOwner` condition when you need, which is `msg.sender == owner`,
but if you use the value not in the `NormalUser1,NormalUser2,NormalUser3,TargetOwner`, just to make sure this value should be a hexadecimal value starts with the `0x`.
2.Now you need to check for each statement if there is function call before the statement,
if there is a function call, you need to make sure that the called function executes and returns correctly without crashing.
which means you should also read the called function code, and make sure it can execute without error or revert by designing which may add other functions,
but you can do nothing if it can execute without error.

You should check each `require` and `alert` statement in the called function, and you should make sure that you satisfy the condition in these statements.
You should remember each state variable's initial value is 0, including the array. And each state variable of bool type is `false`.
If you find your sequence can not reach the statement, just modify in the array, and return the modified array to me.

For each function in the function sequence you designed, besides the function you must contain, you should also contain `msgValue` and `msgSender`,
for example, if your designed sequence is `[a(86,87,32),b(),c()]`, you should change it to:
`
    [
    {
        functionName: "a(86,87,32)",
        msgValue: 1,
        msgSender: NormalUser1,
    },
    {
        functionName: "b()",
        msgValue: 1,
        msgSender: NormalUser2,
    },
    {
        functionName: "c()",
        msgValue: 1,
        msgSender: NormalUser3,
    }
     ]
`
By the way, `address(this)` appears in the function is `TARG_CONTRACT`, you can use this as the parameter, but it is not used for the `msg.sender`.
By the way, you can only use these values for the `address` type of the parameter, `NormalUser1,NormalUser2,NormalUser3,TargetOwner,TARG_CONTRACT`.

Note, all the state variables in the contract are init as 0, and `bool` type variables are init as `false`, before they are init by the constructor.

So you can just change the `statementArray`, for each element,
just maintain one key `functionName`, and delete other keys.
you should add a key called `sequences`, the object corresponding the key should be an array,
for any i less than `block_first_statement`.length, sequences[i] should reach the block_first_statement[i],
if you find that you have produced some duplicate sequences, deduplicate your sequences;
you should add a key called `reason`, the object corresponding the key should be an array,
for any i less than  `sequence`.length, `reason[i]` should be the reason you designed for the `sequence[i]`



You should only Return the changed statementArray to me.

